<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wilson&#39;s thought corner</title>
    <description>Long Form Jekyll theme built with SASS / COMPASS / SUSY</description>
    <link>http://brianmaierjr.github.com/long-haul/</link>
    <atom:link href="http://brianmaierjr.github.com/long-haul/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 21 Jul 2016 22:12:54 -0400</pubDate>
    <lastBuildDate>Thu, 21 Jul 2016 22:12:54 -0400</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      
      <item>
        <title>First blog post: All about work</title>
        <description>&lt;p&gt;I’ve been meaning to make a blog and start posting for quite some time but kept putting it off. Summer 2016 marks the beginning of new things so here we go. In this post, I’ll primarily be talking about the first two months of my PEY.&lt;/p&gt;

&lt;p&gt;The University of Toronto has a fantastic internship opportunity known as the Professional Experience Year (PEY) program. The PEY program is a 12-16 month internship that gives students a true feel of working at a company or startup. Unlike traditional 3-4 month internships, students engage their work longer and get a deeper understanding and appreciation (or disdain) of their chosen profession. This also gives students the option to focus, re-adjust, or 180 their course choices for 4th year, so that what they learn better reflects what they wish to do in the future.&lt;/p&gt;

&lt;p&gt;As for me, I’ve chosen to work at a company called &lt;a href=&quot;https://www.dacgroup.com&quot;&gt;DAC Group&lt;/a&gt; as a software developer. DAC stands for Directory Advertising Consultants, and in layman terms, my company offers digital marketing services from end to end (google ad to transaction page). DAC Group and has taken a highly digitalized stance, fully embracing the information age. I work full-stack development for one of the applications (services provided) along with one other PEY student and a team of 4 full-time software engineers.&lt;/p&gt;

&lt;p&gt;During my time at DAC group, I’ve been a part of a major release and production deployment that DAC Group has launched. I didn’t read my non-disclosure agreement too closely when I signed, so I’m really not sure what can and cannot say. However, several things have become very apparent for me as I look forward towards the next 20+ years of my career:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Software is only a tool. It can be used to create services, platforms, and networks, but by itself it is worthless.&lt;/li&gt;
  &lt;li&gt;For a well-paying software career that grows as you age, you’ll need to either enter upper management or get into big companies in the Si Valley.&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;software-is-only-a-tool&quot;&gt;1. &lt;em&gt;Software is only a tool&lt;/em&gt;&lt;/h5&gt;
&lt;p&gt;While point 1 is very obvious, I found it to be quite a turning point in how I see my future, especially in conjunction with point 3. In stock trading, people are often told to “find their own edge.” This makes intuitive sense, because if there was an edge everyone had, it would no longer be an edge. For example, a software engineer may find his edge in analyzing technology trends and placing his money in promising small to medium sized companies. This edge is unique to him (and other software engineers) because only his understanding of technology allows him to make educated investments.&lt;/p&gt;

&lt;p&gt;Similarily, if you want to create something meaningful and new with software, your ‘edge’ over competitors lies in the knowledge advantage that you hold (or lack) with respect to the thing you want to develop. The mentality should not be “I know software, so I’ll make something,” but rather “I want to make something, so I’ll learn software.” This means that anyone hoping to escape software in the future and do their own thing better have a damn good idea about what service they’re trying to provide rather than the software technologies they plan to use.&lt;/p&gt;

&lt;h4 id=&quot;get-into-upper-management-or-silicon-valley&quot;&gt;2. &lt;em&gt;Get into upper management or Silicon Valley&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Please note that this point is only interesting if money is a primary concern for your career. Many people choose to prioritize things like lifestyle and location over money, and so would argue this point heavily.&lt;/p&gt;

&lt;p&gt;Perhaps getting into the states is fine, but it seems that Canadian software engineers experience extremely limited growth over their careers. In canada, you’d be lucky to break the 90k/annum mark (pre tax). While that sounds pretty good, and is certainly enough to live your life comfortably, I think that it’d be selling yourself short for any sort of seasoned software engineer after 20+ years of experience. For the following numbers I’m about to provide, you can verify by a quick google search that I’m in the correct ball-park amounts. Example &lt;a href=&quot;http://www.payscale.com/research/CA/Job=Software_Engineer_%2F_Developer_%2F_Programmer/Salary&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;https://www.glassdoor.ca/Salaries/toronto-software-engineer-salary-SRCH_IL.0,7_IM976_KO8,25.htm?countryRedirect=true&quot;&gt;here&lt;/a&gt;, and &lt;a href=&quot;http://www.payscale.com/research/US/Job=Software_Engineer/Salary&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Most software engineers enter the scene (in Canada) at anywhere of 45k - 60k per annum, and will cap to about 90k, where they will either switch fields or enter management. This 50% growth over &lt;em&gt;the course of a career&lt;/em&gt; means that near the end of your career, you are monetarily 1.5x your value when you began. In reality, you may be producing 10 - 15 times more value for your employer. In the field of software development, there is a popular notion of the “10X engineer,” who is regarded as a highly productive engineer that is 10 times more productive than his/her peers. This doesn’t mean that the 10x engineer will solve a problem in 3 minutes when it would take his peers 30 minutes. Instead, the 10x engineer solves the &lt;em&gt;correct&lt;/em&gt; problem, and thus alleviates the need to revisit the problem at a later time. Additionally, his code is clean and understandable, which saves incoming new engineers time to understand the current code base. You can read more about the 10x engineer &lt;a href=&quot;https://www.quora.com/Are-there-engineers-who-are-not-10x-but-100-or-1000x-as-productive-as-the-average&quot;&gt;here&lt;/a&gt;, but the bottom line is that your productivity and value is not reflected in your salary as you become a better and better software engineer.&lt;/p&gt;

&lt;p&gt;Knowing this, I focus every day to write code that is understandable, reusable, and dynamic. I think hard about every problem that I solve, and make sure that I target the core of the problem.&lt;/p&gt;
</description>
        
          <description>&lt;p&gt;I’ve been meaning to make a blog and start posting for quite some time but kept putting it off. Summer 2016 marks the beginning of new things so here we go. In this post, I’ll primarily be talking about the first two months of my PEY.&lt;/p&gt;

</description>
        
        <pubDate>Thu, 21 Jul 2016 00:00:00 -0400</pubDate>
        <link>http://brianmaierjr.github.com/long-haul/blog/first-post/</link>
        <guid isPermaLink="true">http://brianmaierjr.github.com/long-haul/blog/first-post/</guid>
        
        
      </item>
      
    
  </channel>
</rss>
